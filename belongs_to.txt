has_many<employee>   <->     belongs_to<department>

struct employee
{
  oos::belongs_to<department> dep;

  template < class S >
  void serialize(S &s)
  {
    s.serialize("department", dep);
  }
};

struct department
{
  oos::has_many<employee> emps;

  template < class S >
  void serialize(S &s)
  {
    s.serialize("employee", emps);
  }
};


auto george    = ostore.insert(new employee("george"));
auto insurance = ostore.insert(new department("insurance"));

insurance->emps.push_back(george);


Analyze phase
=============

Case 1: Department attached first

- attach department
- prototype "employee" not found; prepare new
- mark as has many relation for "department" member "employees"

- attach employee
- prototype "employee found"
- if employee contains belongs_to for "department" tie prototypes
- else throw error

Case 2: Employee attached first

- attach employee
- prototype "department" not found: prepare new
- mark as belongs relation for "employee" member "department"

- attach department
- prototype "department" found
- if department contains has_many for "employee" tie prototypes
- else throw error

Business phase
==============

Case 1: emplyoee sets a department

- employee gets object type "department" with member name "employees" from prototype
- employee is added to departments employees container

Case 2: department adds an employee

- department gets object type "employee" with member name "department" from prototype
- department is set for employee
